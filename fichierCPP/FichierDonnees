#include "Affichage.h"
#include "CalculePhysique.h"
#include "FichierDonnees.h"
#include "InterfaceGraphique.h"
#define _CRT_SECURE_NO_WARNINGS

#include <fstream>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sstream>
#include <string>
#include <vector>
#include <iostream>



using namespace std;

void AffichageAvecDonnees(void) {
    // Initialisation des variables
    float lfMasseCabine = 0.0, lfMasseContrepoids = 0.0, lfTensionCabine = 0.0, lfTensionContrepoids = 0.0, lfRayonPoulie = 0.0, lfVitesseMax = 0.0, lfDureeAcceleration = 0.0, lfCoupleMoteur = 0.0, lfPuissanceMoteur = 0.0, lfAccelerationAngulaire = 0.0, lfMomentInertie = 0.0, lfDistance = 0.0;
    int liChoixDonne = 0;
    string lsLigne;
    ifstream lsFichier; // Flux de fichier d'entrée

    // Algorithme
    lsFichier.open("../dependances_exterieurs/Fichier_Donnee.csv", ios::in); // Ouverture du fichier en lecture
    if (lsFichier.is_open()) {
        // Lire et ignorer la première ligne (en-tête)
        getline(lsFichier, lsLigne);

        // Lire la deuxième ligne
        getline(lsFichier, lsLigne);

        lsFichier.close();

        // Convertir la ligne en tableau de caractères
        std::vector<char> lvStr(lsLigne.begin(), lsLigne.end());
        lvStr.push_back('\0'); // Ajouter un caractère nul à la fin

        // Décomposer la ligne en tokens
        char* pch = strtok(lvStr.data(), " ,");
        if (pch != nullptr) {
            lfMasseCabine = atof(pch);
            pch = strtok(nullptr, " ,");
        }
        if (pch != nullptr) {
            lfMasseContrepoids = atof(pch);
            pch = strtok(nullptr, " ,");
        }
        if (pch != nullptr) {
            lfRayonPoulie = atof(pch);
            pch = strtok(nullptr, " ,");
        }
        if (pch != nullptr) {
            lfVitesseMax = atof(pch);
            pch = strtok(nullptr, " ,");
        }
        if (pch != nullptr) {
            lfDureeAcceleration = atof(pch);
            pch = strtok(nullptr, " ,");
        }
        if (pch != nullptr) {
            lfCoupleMoteur = atof(pch);
            pch = strtok(nullptr, " ,");
        }
        if (pch != nullptr) {
            lfPuissanceMoteur = atof(pch);
            pch = strtok(nullptr, " ,");
        }
        if (pch != nullptr) {
            lfTensionCabine = atof(pch);
            pch = strtok(nullptr, " ,");
        }
        if (pch != nullptr) {
            lfTensionContrepoids = atof(pch);
            pch = strtok(nullptr, " ,");
        }
        if (pch != nullptr) {
            lfAccelerationAngulaire = atof(pch);
            pch = strtok(nullptr, " ,");
        }
        if (pch != nullptr) {
            lfMomentInertie = atof(pch);
            pch = strtok(nullptr, " ,");
        }
        if (pch != nullptr) {
            lfDistance = atof(pch);
        }

        // Afficher les valeurs des variables
        cout << "Masse de la cabine: " << lfMasseCabine << endl;
        cout << "Masse du contrepoids: " << lfMasseContrepoids << endl;
        cout << "Rayon de la poulie: " << lfRayonPoulie << endl;
        cout << "Vitesse maximum: " << lfVitesseMax << endl;
        cout << "Duree de l'acceleration: " << lfDureeAcceleration << endl;
        cout << "Couple moteur: " << lfCoupleMoteur << endl;
        cout << "Tension de la cabine: " << lfTensionCabine << endl;
        cout << "Tension du contrepoids: " << lfTensionContrepoids << endl;
        cout << "Acceleration angulaire: " << lfAccelerationAngulaire << endl;
        cout << "Moment d'inertie: " << lfMomentInertie << endl;
        cout << "Distance: " << lfDistance << endl;

        while (true) { // Boucle pour répéter le menu après chaque calcul/choix
            cout << "\n==== MENU PRINCIPAL (Fichier .csv actif) ====\n"
                << " 1. Calculer la tension\n"
                << " 2. Calculer le couple moteur\n"
                << " 3. Calculer la puissance moteur\n"
                << " 4. Calculer le rayon de la poulie\n"
                << " 5. Calculer la vitesse de rotation\n"
                << " 6. Calculer le temps de montee/descente\n"
                << " 7. Calculer l'acceleration\n"
                << " 8. Voir la simulation\n"
                << " 9. Executer les tests\n"
                << "10. Quitter le .csv\n"
                << "Entrez votre choix : ";
            cin >> liChoixDonne;

            switch (liChoixDonne) {
            case 1: {
                float lfAccelerationAngulaire2 = lfAccelerationAngulaire,
                    lfMomentInertie2 = lfMomentInertie,
                    lfMasseCabine2 = lfMasseCabine,
                    lfMasseContrepoids2 = lfMasseContrepoids,
                    lfRayonPoulie2 = lfRayonPoulie,
                    lfPuissanceMoteur2 = lfPuissanceMoteur,
                    lfVitesseMax2 = lfVitesseMax;

                int liChoixTension, liChoixResult;

                cout << "Donner la formule a utiliser en fonction des valeurs que vous avez: \n" 
                     << "0 = acceleration et masse \n"
                     << "1 = les moments de force, les moments d'inertie et acceleration \n";
                cin >> liChoixTension;
                cout << "Donner le resultat que vous voulez \n"
                    << "0 = tension de la cabine \n"
                    << "1 = tension du contrepoids \n"
                    << "2 = les deux \n";
                cin >> liChoixResult;

                Tensions lsResult = CalculerTension(liChoixTension, liChoixResult, lfMasseCabine2, lfMasseContrepoids2, lfAccelerationAngulaire2, lfMomentInertie2, lfRayonPoulie2, lfPuissanceMoteur2, lfVitesseMax2);
                cout << "Tension cabine: " << lsResult.cabine << " N, Tension contrepoids: " << lsResult.contrepoids << " N\n";
                break;
            }

            case 2: {
                float lfTensionCabine2 = lfTensionCabine, lfTensionContrepoids2 = lfTensionContrepoids, lfAlpha2 = lfAccelerationAngulaire, lfMomentsDInertie2 = lfMomentInertie, lfRayon2 = lfRayonPoulie, lfPMoteur2 = lfPuissanceMoteur, lfVitesse2 = lfVitesseMax;
                int liChoixCouple;

                cout << "Choisissez votre methode de calcul \n"
                     << "0 = couple moteur par puissance \n"
                     << "1 = couple moteur par tensions) \n";

                cin >> liChoixCouple;
                cout << "Couple moteur : " << CoupleMoteur(liChoixCouple, lfTensionCabine2, lfTensionContrepoids2, lfAlpha2, lfMomentsDInertie2, lfRayon2, lfPMoteur2, lfVitesse2) << " Nm\n";
                break;
            }

            case 3: {
                float lfCoupleMot2 = lfCoupleMoteur, lfVitesse2 = lfVitesseMax, lfRayon2 = lfRayonPoulie;
                cout << "Puissance moteur : " << PuissanceMoteur(lfCoupleMot2, lfVitesse2, lfRayon2) << " W\n";
                break;
            }

            case 4: {
                float lfVitesse2 = lfVitesseMax, lfVitesseAngulaire2 = lfAccelerationAngulaire, lfCoupleMoteur2 = lfCoupleMoteur, lfPuissanceMoteur2 = lfPuissanceMoteur;
                int li_ChoixCalcul2;
                cout << "Choisissez la formule :\n"
                    << "0 = Utiliser vitesse lineaire et vitesse angulaire\n"
                    << "1 = Utiliser vitesse ,cm ,pm\n"
                    << "Votre choix : ";
                cin >> li_ChoixCalcul2;

                i_SecuriserSaisie(li_ChoixCalcul2);
                cout << "Rayon de la poulie : " << RayonPoulie(li_ChoixCalcul2, lfVitesse2, lfVitesseAngulaire2, lfCoupleMoteur2, lfPuissanceMoteur2) << " m\n";
                break;
            }

            case 5: {
                float lfVitesseAngulaire2 = lfAccelerationAngulaire;
                cout << "Vitesse de rotation : " << VitesseRotation(lfVitesseAngulaire2) << " tr/min\n";
                break;
            }

            case 6: {
                float lfDistance2 = lfDistance, lfVitesse2 = lfVitesseMax;
                cout << "Temps de montee/descente : " << TempsMonteeAndDescente(lfDistance2, lfVitesse2) << " s\n";
                break;
            }

            case 7: {
                float lfMasseCabine2 = lfMasseCabine, lfMasseContrepoids2 = lfMasseContrepoids, lfTensionCabine2 = lfTensionCabine, lfTensionContrepoids2 = lfTensionContrepoids, lfVitesse2 = lfVitesseMax;
                int liChoixAcc;

                cout << "Choisissez votre méthode de calcul: "
                     << "0 = cabine \n"
                     << "1 = contrepoids \n"
                     << "2 = aucun \n";
                cin >> liChoixAcc;
                i_SecuriserSaisie(liChoixAcc);

                cout << "Acceleration : " << Acceleration(liChoixAcc, lfMasseContrepoids2, lfMasseCabine2, lfTensionContrepoids2, lfTensionCabine2, lfVitesse2) << " m/s²\n";
                break;
            }

            case 8:
                SFMLSimulation();

                break;
            case 9:
                TestFonction();

                break;
            case 10:
                cout << "Arrêt du fichier .csv\n";

                break;                                 //verifier parce que le code s'arrete pas

            default:
                cout << "Choix invalide, veuillez reessayer.\n";
            }
        }
    }
    else {
        cout << "Impossible d'ouvrir le fichier." << endl;
    }
}
